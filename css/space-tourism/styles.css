:root {
  /* colors */
  /* advantages of RGB and HSL is */
  /* if we store RGB or HSL values in a custom property we can easily tweak alpha value when needed */
  --clr-dark: 230 35% 7%;
  --clr-light: 231 77% 90%;
  --clr-white: 0 0% 100%;

  /* font sizes */
  --fs-900: clamp(5rem, 8vw + 1rem, 9.375rem);
  --fs-800: 6.25rem;
  --fs-700: 3.5rem;
  --fs-600: 2rem;
  --fs-500: 1.75rem;
  --fs-400: 1.125rem;
  --fs-300: 1rem;
  --fs-200: 0.875rem;

  /* divide font sizes in px by 16 you will get rem values */

  /* font families */
  --ff-serif: "Bellefair", serif;
  --ff-sans-cond: "Barlow Condensed", sans-serif;
  --ff-sans-normal: "Barlow", sans-serif;
}

@media (min-width: 35em) {
  :root {
    --fs-800: 5rem;
    --fs-700: 2.5rem;
    --fs-600: 1.5rem;
    --fs-500: 1.25rem;
    --fs-400: 1rem;
  }
}

@media (min-width: 45em) {
  /* should use em for media queries because 
1Ô∏è‚É£ Respects User Preferences
    If the user changes their default browser font size, em adapts automatically.
    rem stays tied to the root font size (html { font-size: 16px; } by default), making it less flexible.
2Ô∏è‚É£ More Responsive to Zooming
    Browsers often scale layouts based on em values when zooming, making your site more accessible.
    rem does not scale as well in this case.
3Ô∏è‚É£ Standard Across Browsers
    Most modern CSS frameworks and best practices recommend using em in media queries.
 */
  :root {
    /* font-sizes */
    --fs-800: 6.25rem;
    --fs-700: 3.5rem;
    --fs-600: 2rem;
    --fs-500: 1.75rem;
    --fs-400: 1.125rem;
  }
}

/* Reset section */

/* Bix sizing */
*,
*::after,
*::before {
  box-sizing: border-box;
}

/* Reset margins */
body,
h1,
h2,
h3,
h4,
h5,
h6,
p,
figure,
picture {
  margin: 0;
}

h1,
h2,
h3,
h4,
h5,
h6,
p {
  font-weight: 400;
}

/* default browser line height is 1.4 */
body {
  font-family: var(--ff-sans-normal);
  font-size: var(--fs-400);
  color: hsl(var(--clr-white));
  background-color: hsl(var(--clr-dark));
  line-height: 1.5;
  min-height: 100vh;
  display: grid;
  grid-template-rows: min-content 1fr;
}

/* make images easier to work with */
img,
picture {
  max-width: 100%;
  display: block;
}

/* make form elements easier to work with */
input,
button,
textarea,
select {
  font: inherit;
}

/* remove animations for people who have turned them off */
@media (prefers-reduced-motion: reduce) {
  *,
  *::after,
  *::before {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}

.flex {
  display: flex;
  gap: var(--gap, 1rem);
}

.grid {
  display: grid;
  gap: var(--gap, 1rem);
}

.container {
  padding-inline: 2em; /* x-axis padding */
  max-width: 80rem;
  margin-inline: auto;
}

/* technologies that will read page for visully impaired  */
/* add this class to any element it will not be visually there but will be there for screen readers */
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

.uppercase {
  text-transform: uppercase;
}

.letter-spacing-1 {
  letter-spacing: 4.75px;
}

.letter-spacing-2 {
  letter-spacing: 2.7px;
}

.letter-spacing-3 {
  letter-spacing: 2.35px;
}

.bg-dark {
  background-color: hsl(var(--clr-dark));
}
.bg-accent {
  background-color: hsl(var(--clr-light));
}
.bg-white {
  background-color: hsl(var(--clr-white));
}

.text-dark {
  color: hsl(var(--clr-dark));
}
.text-accent {
  color: hsl(var(--clr-light));
}
.text-white {
  color: hsl(var(--clr-white));
}

.fs-900 {
  font-size: var(--fs-900);
}
.fs-800 {
  font-size: var(--fs-800);
}
.fs-700 {
  font-size: var(--fs-700);
}
.fs-600 {
  font-size: var(--fs-600);
}
.fs-500 {
  font-size: var(--fs-500);
}
.fs-400 {
  font-size: var(--fs-400);
}
.fs-300 {
  font-size: var(--fs-300);
}
.fs-200 {
  font-size: var(--fs-200);
}

.fs-900,
.fs-800,
.fs-700,
.fs-600 {
  line-height: 1.1;
}

.color-container {
  flex: 1;
}

.color-box {
  border: 1px solid pink;
  height: 100px;
  padding: 3rem 0.5rem 1rem 2rem;
}

.large-button {
  position: relative;
  display: inline-grid;
  aspect-ratio: 1;
  padding: 0 2em;
  place-items: center;
  border-radius: 50%;
  text-decoration: none;
  z-index: 1;
}

.large-button::after {
  content: "";
  position: absolute;
  background: hsl(var(--clr-white) / 0.15);
  width: 100%;
  height: 100%;
  border-radius: 50%;
  z-index: -1;
  transition: transform 300ms ease-in-out;
}

.large-button:hover::after,
.large-button:focus::after {
  transform: scale(1.5);
}

.primary-navigation {
  --gap: 8rem;
  --underline-gap: 2rem;
  list-style: none;
  padding: 0;
  margin: 0;
}

.primary-navigation a {
  text-decoration: none;
}

.primary-navigation a > span {
  margin-right: 0.5em;
  font-weight: 700;
}

.underline-indicators li {
  /* padding: var(--underline-gap, 1rem), 0;  */
  padding: 1rem 0;
  border-bottom: 0.2rem solid hsl(var(--clr-white) / 0);
}

.underline-indicators li:hover {
  border-color: hsl(var(--clr-white) / 0.25);
}

.underline-indicators .active {
  border-color: hsl(var(--clr-white) / 1);
}

.grid-container {
  /* by default we are showing only one column and added media query for large screens */
  text-align: center;
  place-items: center;
  border: 1px solid red;
  display: grid;
}

@media (min-width: 45rem) {
  /* Large screen that is if screen width is atleast has 45rem  */
  .grid-container {
    text-align: left;
    column-gap: var(--container-gap, 2rem);
    grid-template-columns: minmax(1rem, 1fr) repeat(2, minmax(0, 40rem)) minmax(
        1rem,
        1fr
      );
  }
  .grid-container > *:first-child {
    border: 1px solid blue;
    grid-column: 2;
  }

  .grid-container > *:last-child {
    border: 1px solid yellow;
    grid-column: 3;
  }
}

/* Why Use em for Button and Link Padding?
    ‚úÖ Short Answer:
    Using em for padding in buttons and links ensures that the padding scales with the font size of the element, making it more responsive and flexible.

    üîπ Understanding em vs. rem for Padding
    Unit	Based On	Best Used For
    rem	Root font size (html font-size)	Global spacing (e.g., margins, sections, layouts)
    em	The element‚Äôs own font size	Padding inside buttons, links, input fields
    üìå Why Use em for Padding in Buttons & Links?
    1Ô∏è‚É£ Scales with Font Size

    If you increase a button's font-size, the padding grows proportionally.
    Example:
    button {
    font-size: 1.25em;  /* Larger font
    padding: 0.5em 1em;  Padding scales with font 
    }
    If font-size: 20px, then:
    0.5em = 10px
    1em = 20px
    If the font size changes, padding adjusts automatically!
    2Ô∏è‚É£ Keeps Buttons & Links Balanced

    em ensures that the button looks proportionate regardless of font size.
    If rem were used, padding would remain fixed, potentially making the button look too large or too small.
    3Ô∏è‚É£ Improves Accessibility & Readability

    Users who increase their browser's font size (for accessibility reasons) will also see proportionally larger buttons, making them easier to interact with.

When to Use rem Instead?
    For layout-based spacing (margins, sections, containers):
    .section {
        margin-bottom: 2rem; /* Consistent across the whole site 
    }
    For global button sizes (if you don‚Äôt want padding to change with font-size):
    button {
        padding: 12px 24px; /* Fixed size, doesn't scale with text 
    }
*/
